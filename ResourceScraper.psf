function Set-OutputPath {
	param
	(
		[string]$path
	)
	
	if (-not (Test-Path -Path $txtPath.Text -PathType Leaf)) {
		try {
			New-Item -Path $txtPath.Text -ItemType directory -Force
			$txtRequestResult.Text = "Output path created."
			$txtRequestResult.ForeColor = [System.Drawing.Color]::Lime
		} catch {
			$txtRequestResult.Text = "Could not create the output path."
			$txtRequestResult.ForeColor = [System.Drawing.Color]::Red
		}
	}
}

$frmMain_Load={
	# Set the current Directory
	#$script:curDir = $PSScriptRoot
	#$script:curDir = (Get-Location).Path
	$scriptDir = Get-ScriptDirectory
	if ($scriptDir.Count -eq 1) {
		$script:curDir = $scriptDir
	} else {
		$script:curDir = $scriptDir[$scriptDir.Count - 1]
	}
	# Check for the backup INI file
	if ([System.IO.File]::Exists("$($script:curDir)\ResourceScrape.bak")) {
		Copy-Item -Path "$($script:curDir)\ResourceScrape.bak" -Destination "$($script:curDir)\ResourceScrape.ini"
	}
	# Read the ini file
	$script:iniFile = get-inifile -filePath "$($script:curDir)\ResourceScrape.ini"
#	# Script Version
#	$myVer = "1.1.1"
	
#	[System.Windows.Forms.MessageBox]::Show($frmMain, "Script Path: $($script:curDir)", "Script Path", "OK", [System.Windows.Forms.MessageBoxIcon]::Information)
	
	# Make the initial group box the main one
	$grpRequestScrape.Dock = 'Fill'
	$grpRequestScrape.Visible = $true
	$grpGetScrape.Dock = 'Fill'
	$grpGetScrape.Visible = $false
	
	# Get the current Date/Time stamp
	$curTimeStamp = (Get-Date).ToString("yyyyMMdd-HHmmss")
	
	$hover = New-Object System.Windows.Forms.ToolTip
	$hover.SetToolTip($radAWS, "Coming Soon")
	$hover.SetToolTip($radGCP, "Coming Soon")
	
	# Set the starting environment values based on the ini file
	Set-ControlTheme -Control $frmMain -Theme $script:iniFile.guienvironment.theme
	$txtPath.Text = $script:iniFile.guienvironment.outPath
	if ($script:iniFile.guienvironment.logDetails -eq "true") { $chkDetails.Checked = $true } else { $chkDetails.Checked = $false }
	if ($script:iniFile.guienvironment.useTimestamp -eq "true") { $chkTimeStamp.Checked = $true } else { $chkTimeStamp.Checked = $false }
	if ($script:iniFile.guienvironment.displayHTML -eq "true") { $chkDisplayResults.Checked = $true } else { $chkDisplayResults.Checked = $false }
	
	# Get the local version
	$lclVersionMSI = (Get-Version -software 'Skillable Cloud Harbor').Version
	# Get the remote version
	$iniGit = "https://raw.githubusercontent.com/Yorik1971/process-rescrape/main/ResourceScrape.ini"
	$gitVer = Invoke-RestMethod -Uri $iniGit
	$rmtFile = Parse-IniFile -iniContent $gitVer
	$rmtVersionMSI = $rmtFile["versions"]["CloudHarbor.msi"]
	# If the versions do not match get the user to download the Installer
	if ($lclVersionMSI -ne $rmtVersionMSI) {
		[System.Windows.Forms.MessageBox]::Show($frmMain, "A new version of Skillable Cloud Harbor is available. Select the Help '?' icon to download the installer.", "New Version", "OK", [System.Windows.Forms.MessageBoxIcon]::Information)
	}
}

$frmMain.add_Closed({
		# Set the ini file path
		$outFile = "$($script:curDir)\ResourceScrape.ini"
		
		# Set the current Environment values
		if ($frmMain.BackColor.Name -eq "WhiteSmoke") { $script:iniFile["guienvironment"]["theme"] = "Light" } else { $script:iniFile["guienvironment"]["theme"] = "Dark" }
		$script:iniFile["guienvironment"]["outPath"] = $txtPath.Text
		if ($chkDetails.Checked) { $script:iniFile["guienvironment"]["logDetails"] = "true" } else { $script:iniFile["guienvironment"]["logDetails"] = "false" }
		if ($chkTimeStamp.Checked) { $script:iniFile["guienvironment"]["useTimestamp"] = "true" } else { $script:iniFile["guienvironment"]["useTimestamp"] = "false" }
		if ($chkDisplayResults.Checked) { $script:iniFile["guienvironment"]["displayHTML"] = "true" } else { $script:iniFile["guienvironment"]["displayHTML"] = "false" }
		
		# Write the ini File values back to the file
		Set-IniFile -iniObject $script:iniFile -Path $outFile
		Copy-Item -Path $outFile -Destination "$($script:curDir)\ResourceScrape.bak"
	}
)

$mnuThemeDark_Click={
	Set-ControlTheme -Control $frmMain -Theme "Dark"
}

$mnuThemeLight_Click={
	Set-ControlTheme -Control $frmMain -Theme "Light"
}

# Function to validate the Azure Subscription ID
function Validate-SubscriptionID {
	param (
		[string]$subscriptionID
	)
	$pattern = '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'
	
	return [regex]::IsMatch($subscriptionID, $pattern)
}

$timScrape.add_Tick({
		if ([System.IO.File]::Exists("$($txtGetPath.Text)\FlagFile.chk")) {
			$txtStats.Text = Get-Content -Path "$($txtGetPath.Text)\CountFile.cnt" -ErrorAction SilentlyContinue -Raw
		} else {
			# Retrieve the latest Resource Scrape log file
			try {
				$recentFile = Get-ChildItem -Path $txtGetPath.Text -Filter "resourceScrape*.log" |
				Sort-Object -Property LastWriteTime -Descending |
				Select-Object -First 1
			} catch {}
			
			# If the latest file is found then read it
			if ($recentFile) {
				# if a line is found indicating that a request to end the Resource Scrape look for the resulting JSON file
				$match = Select-String -Path "$($txtGetPath.Text)\$($recentFile.Name)" -Pattern "The get-ResourceScrape.ps1 utility has ended"
				if ($match) {
					$txtStats.Text = @"
The end of the Resource Scrape has been requested.

Waiting for the final output file.
"@
					$txtStats.ForeColor = [System.Drawing.Color]::Lime
					
					$jsnFile = [System.IO.Path]::GetFileNameWithoutExtension("$($txtGetPath.Text)\$($recentFile.Name)") + ".json"
					# if the JSON file is found Kick off the ACP Process utility
					if (Test-Path -Path "$($txtGetPath.Text)\$($jsnFile)" -PathType Leaf) {
						# Confirm that the Resource Scrape processor existss
						$prcScrape = "$($script:curDir)\process-ResourceScrape.ps1"
						if (Test-Path -Path $prcScrape -PathType Leaf) {
							$txtStats.Text = @"
The final output file has been found.

Starting the Resource Scrape processor.
"@
							
							$txtStats.ForeColor = [System.Drawing.Color]::Lime
							
							# Set the Result message
							$txtGetResult.Text = "Running the Resource Scrape Processor."
							$txtGetResult.ForeColor = [System.Drawing.Color]::Lime
							
							# Call the Process-ResourceScrape utility
							
							$jobScrape = Start-Job -ScriptBlock {
								param ($cmd,
									$fil,
									$htm,
									$rul,
									$pth,
									$dtl,
									$tme)
								# Set up the parameters
								if ($htm -and $tme -and $dtl) {
									& $cmd -file $fil -rulesFile $rul -OutPath $pth -Details -Stamp -showHtml
								} elseif (($htm -and $tme) -and -not ($dtl)) {
									& $cmd -file $fil -rulesFile $rul -OutPath $pth -Stamp -showHtml
								} elseif (($htm -and $dtl) -and -not ($tme)) {
									& $cmd -file $fil -rulesFile $rul -OutPath $pth -Details -showHtml
								} elseif (($tme -and $dtl) -and -not ($htm)) {
									& $cmd -file $fil -rulesFile $rul -OutPath $pth -Details -Stamp
								} elseif (-not ($htm -and $tme) -and $dtl) {
									& $cmd -file $fil -rulesFile $rul -OutPath $pth -Details
								} elseif (-not ($htm -and $dtl) -and $tme) {
									& $cmd -file $fil -rulesFile $rul -OutPath $pth -Stamp
								} elseif (-not ($tme -and $dtl) -and $htm) {
									& $cmd -file $fil -rulesFile $rul -OutPath $pth -ShowHtml
								} else {
									& $cmd -file $fil -rulesFile $rul -OutPath $pth 
								}
							} -ArgumentList $prcScrape, "$($txtGetPath.Text)\$jsnFile", $chkDisplayResults.Checked, "$($script:curDir)\rules.xml", $txtGetPath.Text, $chkDetails.Checked, $chkTimeStamp.Checked
							
							# Optionally, wait for the job to complete and get the results
							$jobScrape | Wait-Job | Receive-Job
							
							# Check for errors in the job
							$jobScrape | Receive-Job -ErrorAction SilentlyContinue | Format-List *
							
							# Stop the Statistics timer
							$timScrape.Stop()
							
							# Show the Statistics panel
							$grpGetScrape.Visible = $false
							$grpRequestScrape.Visible = $true
						}
					}
				}
			}
		}
	}
)

# Add the LostFocus event handler to the MaskedTextBox
$txtSubscriptionId.Add_LostFocus({
		if (-not ([string]::IsNullOrEmpty($txtSubscriptionId.Text))) {
			$subscriptionID = $txtSubscriptionId.Text
			if (Validate-SubscriptionID -subscriptionID $subscriptionID) {
				$txtRequestResult.Text = "Valid Azure Subscription ID. Sub: $($subscriptionID)"
				$txtRequestResult.ForeColor = [System.Drawing.Color]::Lime
			} else {
				$txtRequestResult.Text = "Invalid Azure Subscription ID. Sub: $($subscriptionID)"
				$txtRequestResult.ForeColor = [System.Drawing.Color]::Red
			}
		}
	}
)

$grpRequestScrape.add_Resize({
		$btnStartScrape.Top = 250
		$btnStartScrape.Left = 20
		$btnStartScrape.Width = $grpRequestScrape.Width - 40
	}
)

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
			if ($target.ContextMenuStrip)
			{
				$Queue.Enqueue($target.ContextMenuStrip);
			}
		}
	}
}
#endregion

function Select-FolderDialog {
	param
	(
		[string]$path
	)
	
	$dialog = New-Object System.Windows.Forms.OpenFileDialog
	$dialog.InitialDirectory = $path
	$dialog.Title = "Select a folder"
	$dialog.CheckFileExists = $false
	$dialog.ValidateNames = $false
	$dialog.FileName = "Folder Selection"
	
	if ($dialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK) {
		$folderPath = [System.IO.Path]::GetDirectoryName($dialog.FileName)
		return $folderPath
	} else {
		return $path
	}
}

$mnuExit_Click={
	# Close the main form
	$frmMain.Close()
}

$btnStartScrape_Click = {
	# Ensure all the fields are properly populated
	if (-not ([string]::IsNullOrEmpty($txtSubscriptionId.Text))) {
		# Ensure the Subscription ID field is populated and valid
		$subscriptionID = $txtSubscriptionId.Text
		if (-not (Validate-SubscriptionID -subscriptionID $subscriptionID)) {
			$txtRequestResult.Text = "Invalid Azure Subscription ID. Sub: $($subscriptionID)"
			$txtRequestResult.ForeColor = [System.Drawing.Color]::Red
		} elseif ([string]::IsNullOrEmpty($txtUsername.Text)) {
			# Ensure the Username field is populated
			$txtRequestResult.Text = "The Username field can not be blank."
			$txtRequestResult.ForeColor = [System.Drawing.Color]::Red
		} elseif ([string]::IsNullOrEmpty($txtPassword.Text)) {
			# Ensure the Password field is populated
			$txtRequestResult.Text = "The Password field can not be blank."
			$txtRequestResult.ForeColor = [System.Drawing.Color]::Red
		} elseif ([string]::IsNullOrEmpty($txtPath.Text)) {
			# Ensure the output path field is populated
			$txtRequestResult.Text = "The Output Path field can not be blank."
			$txtRequestResult.ForeColor = [System.Drawing.Color]::Red
		} else {
			if (Test-Path -Path "$($script:curDir)\get-ResourceScrape.ps1" -PathType Leaf) {
				# Set the default msg for the Stats text box
				$txtStats.Text = @"
Launching the Resource Scrape. 

Please be patient.
"@
				# Show the Statistics panel
				$grpGetScrape.Visible = $true
				$grpRequestScrape.Visible = $false
				
				# Create the output directory if it doesn't exist
				if (-not (Test-Path -Path $txtPath.Text -PathType Container)) {
					Set-OutputPath -path $txtPath.Text
					#					New-Item -ItemType Directory -Force -Path $txtPath.Text
				}
				
				$txtGetPath.Text = $txtPath.Text
				
				# Set the Result message
				$txtGetResult.Text = "The current pass will run until all resources are gathered."
				$txtGetResult.ForeColor = [System.Drawing.Color]::Lime
				
				# Call the Get-ResourceScrape utility
				$getScrape = "$($script:curDir)\get-ResourceScrape.ps1"
				# Set up the parameters
				if ($chkTimeStamp.Checked -and $chkDetails.Checked) {
					$params = @{
						Subscription = $txtSubscriptionId.Text
						Username	 = $txtUsername.Text
						Password	 = $txtPassword.Text
						OutPath	     = $txtPath.Text
						Details	     = $chkDetails.Checked
						Stamp	     = $chkTimeStamp.Checked
					}
				} elseif ($chkTimeStamp.Checked -and -not ($chkDetails.Checked)) {
					$params = @{
						Subscription = $txtSubscriptionId.Text
						Username	 = $txtUsername.Text
						Password	 = $txtPassword.Text
						OutPath	     = $txtPath.Text
						Stamp	     = $chkTimeStamp.Checked
					}
				} elseif (-not ($chkTimeStamp.Checked) -and $chkDetails.Checked) {
					$params = @{
						Subscription = $txtSubscriptionId.Text
						Username	 = $txtUsername.Text
						Password	 = $txtPassword.Text
						OutPath	     = $txtPath.Text
						Details	     = $chkDetails.Checked
					}
				} else {
					$params = @{
						Subscription = $txtSubscriptionId.Text
						Username	 = $txtUsername.Text
						Password	 = $txtPassword.Text
						OutPath	     = $txtPath.Text
					}
				}
				
				$job = Start-Job -ScriptBlock {
					param ($getScrape,
						$params)
					& $getScrape @params
				} -ArgumentList $getScrape, $params
				
				$result = Receive-Job -Job $job
				
				# start the Statistics timer
				$timScrape.Start()
				
			} else {
				$txtRequestResult.Text = "Could not find the 'get-ResourceScrape.ps1' utility in $($script:curDir)."
				$txtRequestResult.ForeColor = [System.Drawing.Color]::Red
			}
		}
	} else {
		$txtRequestResult.Text = "The Subscription ID field can not be blank."
		$txtRequestResult.ForeColor = [System.Drawing.Color]::Red
	}
}

$btnCancel.add_Click({
		# Delete the Job Scrape Flag File
		Remove-Item -Path "$($txtGetPath.Text)\FlagFile.chk" -Force -ErrorAction SilentlyContinue
		
		# Show Cancellation message
		$txtRequestResult.Text = "The Resource Scrape has been cancelled by the user. The Report may display when ready."
		$txtRequestResult.ForeColor = [System.Drawing.Color]::Orange
		
		# Show the Statistics panel
		$grpRequestScrape.Visible = $true
		$grpGetScrape.Visible = $false
		
	}
)

<#
	.SYNOPSIS
		Get-ScriptDirectory returns the proper location of the script.
	
	.DESCRIPTION
		A detailed description of the Get-ScriptDirectory function.
	
	.OUTPUTS
		System.String
	
	.NOTES
		Returns the correct path within a packaged executable.
#>
function Get-ScriptDirectory {
	[OutputType([string])]
	param ()
	
	$retVal = ""
	if ($null -ne $hostinvocation) {
		$retVal = Split-Path $hostinvocation.MyCommand.path
	} else {
		$retVal = Split-Path $script:MyInvocation.MyCommand.Path
	}
	
#	[System.Windows.Forms.MessageBox]::Show("Script Path: $($retVal)", "Script Path", "OK", [System.Windows.Forms.MessageBoxIcon]::Information)
	
	return $retVal
	
}

$jobScrape = $null

function Get-IniContent {
	param
	(
		$filePath
	)
	
	$ini = @{ }
	switch -regex -file $FilePath
	{
		"^\[(.+)\]" # Section
		{
			$section = $matches[1]
			$ini[$section] = @{ }
			$CommentCount = 0
		}
		"^(;.*)$" # Comment
		{
			$value = $matches[1]
			$CommentCount = $CommentCount + 1
			$name = "Comment" + $CommentCount
			try {
				$ini[$section][$name] = $value
			} catch { }
		}
		"(.+?)\s*=(.*)" # Key
		{
			$name, $value = $matches[1 .. 2]
			$ini[$section][$name] = $value
		}
	}
	return $ini
}

function Parse-IniFile {
	param (
		[string]$iniContent
	)
	
	$iniHashTable = @{ }
	$currentSection = $null
	
	foreach ($line in $iniContent -split "`n") {
		$line = $line.Trim()
		if ($line -match '^\[(.+)\]$') {
			$currentSection = $matches[1]
			if (-not $iniHashTable.ContainsKey($currentSection)) {
				$iniHashTable[$currentSection] = @{ }
			}
		} elseif ($line -match '^\s*([^=]+)\s*=\s*(.*)\s*$') {
			$key = $matches[1].Trim()
			$value = $matches[2].Trim()
			if ($currentSection) {
				$iniHashTable[$currentSection][$key] = $value
			} else {
				$iniHashTable[$key] = $value
			}
		}
	}
	
	return $iniHashTable
}

function Get-IniFile {
    <#
    .SYNOPSIS
    Read an ini file.
    
    .DESCRIPTION
    Reads an ini file into a hash table of sections with keys and values.
    
    .PARAMETER filePath
    The path to the INI file.
    
    .PARAMETER anonymous
    The section name to use for the anonymous section (keys that come before any section declaration).
    
    .PARAMETER comments
    Enables saving of comments to a comment section in the resulting hash table.
    The comments for each section will be stored in a section that has the same name as the section of its origin, but has the comment suffix appended.
    Comments will be keyed with the comment key prefix and a sequence number for the comment. The sequence number is reset for every section.
    
    .PARAMETER commentsSectionsSuffix
    The suffix for comment sections. The default value is an underscore ('_').
    .PARAMETER commentsKeyPrefix
    The prefix for comment keys. The default value is 'Comment'.
    
    .EXAMPLE
    Get-IniFile /path/to/my/inifile.ini
    
    .NOTES
    The resulting hash table has the form [sectionName->sectionContent], where sectionName is a string and sectionContent is a hash table of the form [key->value] where both are strings.
    This function is largely copied from https://stackoverflow.com/a/43697842/1031534. An improved version has since been pulished at https://gist.github.com/beruic/1be71ae570646bca40734280ea357e3c.
    #>
	
	param (
		[parameter(Mandatory = $true)]
		[string]$filePath,
		[string]$anonymous = 'NoSection',
		[switch]$comments,
		[string]$commentsSectionsSuffix = '_',
		[string]$commentsKeyPrefix = 'Comment'
	)
	
	$ini = @{ }
	switch -regex -file ($filePath) {
		"^\[(.+)\]$" {
			# Section
			$section = $matches[1]
			$ini[$section] = @{ }
			$CommentCount = 0
			if ($comments) {
				$commentsSection = $section + $commentsSectionsSuffix
				$ini[$commentsSection] = @{ }
			}
			continue
		}
		
		"^(;.*)$" {
			# Comment
			if ($comments) {
				if (!($section)) {
					$section = $anonymous
					$ini[$section] = @{ }
				}
				$value = $matches[1]
				$CommentCount = $CommentCount + 1
				$name = $commentsKeyPrefix + $CommentCount
				$commentsSection = $section + $commentsSectionsSuffix
				$ini[$commentsSection][$name] = $value
			}
			continue
		}
		
		"^(.+?)\s*=\s*(.*)$" {
			# Key
			if (!($section)) {
				$section = $anonymous
				$ini[$section] = @{ }
			}
			$name, $value = $matches[1 .. 2]
			$ini[$section][$name] = $value
			continue
		}
	}
	
	return $ini
}

Function Set-IniFile ($iniObject, $Path, $PrintNoSection = $false, $PreserveNonData = $true) {
	# Based on "http://www.out-web.net/?p=109"
	$Content = @()
	ForEach ($Category in $iniObject.Keys) {
		if (($Category -notlike 'NO_SECTION') -or $PrintNoSection) {
			# Put a newline before category as seperator, only if there is none 
			$seperator = if ($Content[$Content.Count - 1] -eq "") { } else { "`n" }
			
			$Content += $seperator + "[$Category]";
		}
		
		ForEach ($Key in $iniObject.$Category.Keys) {
			if ($Key.StartsWith('<')) {
				if ($PreserveNonData) {
					$Content += $iniObject.$Category.$Key
				}
			} else {
				$Content += "$Key = " + $iniObject.$Category.$Key
			}
		}
	}
	
	$Content | Set-Content $Path -Force
}

function Get-Version {
	[CmdletBinding()]
	param
	(
		[string]$software
	)
	
	# Define the paths to the registry keys containing installed software information
	$regPaths = @(
		"HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall",
		"HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall",
		"HKCU:\Software\Microsoft\Windows\CurrentVersion\Uninstall"
	)
	
	# Initialize an empty array to store the Slack version information
	$info = @()
	
	# Iterate over each registry path
	foreach ($regPath in $regPaths) {
		# Retrieve the software installed on the machine and filter for the required package
		$info += Get-ChildItem -Path $regPath -ErrorAction SilentlyContinue | ForEach-Object {
			$app = Get-ItemProperty $_.PSPath -ErrorAction SilentlyContinue
			if ($app.DisplayName -like "*$($software)*") {
				[PSCustomObject]@{
					Name    = $app.DisplayName
					Version = $app.DisplayVersion
					Path    = $_.PSPath
				}
			}
		} | Where-Object { $_ -ne $null }
	}
	
	return $info
}


$btnPath_Click={
	# Create the output directory if it doesn't exist
	if (-not (Test-Path -Path $txtPath.Text -PathType Container)) {
		Set-OutputPath -path $txtPath.Text
		#					New-Item -ItemType Directory -Force -Path $txtPath.Text
	}
	
	# Show the folder dialog
	$tmp = Select-FolderDialog -path $txtPath.Text
	
	# Select the returned folder
	if (-not [string]::IsNullOrEmpty($txtPath.Text)) {
		if (($tmp -ne $txtPath.Text) -and (-not [string]::IsNullOrEmpty($txtPath.Text))) {
			$txtPath.Text = $tmp
		}
	}
}

$btnGetPath_Click={
	# Create the output directory if it doesn't exist
	if (-not (Test-Path -Path $txtGetPath.Text -PathType Container)) {
		Set-OutputPath -path $txtGetPath.Text
		#					New-Item -ItemType Directory -Force -Path $txtPath.Text
	}
	
	# Show the folder dialog
	$tmp = Select-FolderDialog -path $txtGetPath.Text
	
	# Select the returned folder
	if (-not [string]::IsNullOrEmpty($txtGetPath.Text)) {
		if (($tmp -ne $txtGetPath.Text) -and (-not [string]::IsNullOrEmpty($txtGetPath.Text))) {
			$txtGetPath.Text = $tmp
		}
	}
}

#$scriptDir = ""
#$script:curDir = ""
#$script:iniFile = ""

# Script Version
$myVer = "1.1.1"

$mnuHelp_Click={
	# Define the local version information
	$lclVersionHdr = "Local Versions`n`n"
	$lclVersionInfo = "GUI Forms: $($script:iniFile["versions"]["ResourceScraper.psf"])`nget-ResourceScrape: $($script:iniFile["versions"]["getResourceScrape.ps1"])`nprocess-ResourceScrape: $($script:iniFile["versions"]["processResourceScrape.ps1"])`nRules File: $($script:iniFile["versions"]["rules.xml"])"
	$lclVersionMSI = "`nSkillable Cloud Harbor: " + (Get-Version -software 'Skillable Cloud Harbor').Version
	
	# Get the remote version from GitHub
	$iniGit = "https://raw.githubusercontent.com/Yorik1971/process-rescrape/main/ResourceScrape.ini"
	$gitVer = Invoke-RestMethod -Uri $iniGit
	$rmtFile = Parse-IniFile -iniContent $gitVer
	$rmtVersionHdr = "`n`nRemote Versions`n`n"
	$rmtVersionInfo = "GUI Forms: $($rmtFile["versions"]["ResourceScraper.psf"])`nget-ResourceScrape: $($rmtFile["versions"]["getResourceScrape.ps1"])`nprocess-ResourceScrape: $($rmtFile["versions"]["processResourceScrape.ps1"])`nRules File: $($rmtFile["versions"]["rules.xml"])"
	$rmtVersionMSI = "`nSkillable Cloud Harbor: $($rmtFile["versions"]["CloudHarbor.msi"])"
	
	# Build the message
	$versionMsg = $lclVersionHdr + $lclVersionInfo + $lclVersionMSI + $rmtVersionHdr + $rmtVersionInfo + $rmtVersionMSI
	
	# if github installer is newer than current version
	$showDownload = $false
	if ($lclVersionMSI -ne $rmtVersionMSI) {
		$versionMsg += "`n`nA new version of the Cloud Harbor installer is available."
		$showDownload = $true
	} else {
		$versionMsg += "`n`nUp-To-Date`nYou have installed the latest version of the Skillable`nCloud Harbor package. An installer is not available`nfor any out-of-date components."
	}
	
	# Create the form
	$frmVersions = New-Object System.Windows.Forms.Form
	$frmVersions.Text = "Cloud Harbor Info"
	$frmVersions.Size = New-Object System.Drawing.Size(300, 330)
	$frmVersions.Icon = "Cloud_Harbor_transparent_64.ico"
	$frmVersions.StartPosition = "CenterScreen"
	
	# Create a label to display the version information
	$lblVersions = New-Object System.Windows.Forms.Label
	$lblVersions.Text = $versionMsg
	$lblVersions.AutoSize = $true
	$lblVersions.Location = New-Object System.Drawing.Point(10, 20)
	
	# Add the label to the form
	$frmVersions.Controls.Add($lblVersions)
	
	# Create a label to display the download link
	if ($showDownload) {
		# Define the Download Link
		$linkLabel = New-Object System.Windows.Forms.LinkLabel
		$linkLabel.Text = "Download the Cloud Harbor Installer"
		$linkLabel.AutoSize = $true
		$linkLabel.Location = New-Object System.Drawing.Point(50, 250)
		$linkLabel.Links.Add(0, $linkLabel.Text.Length, "https://github.com/Yorik1971/process-rescrape/raw/main/Skillable%20Resource%20Scraper.msi")
		$linkLabel.SendToBack()
		
		# Add event handler for the LinkClicked event
		$linkLabel.add_LinkClicked({
				$url = "https://github.com/Yorik1971/process-rescrape/raw/main/Skillable%20Resource%20Scraper.msi"
				$dwn = (New-Object -ComObject Shell.Application).NameSpace('shell:Downloads').Self.Path
				$out = Join-Path -Path $dwn -ChildPath "Skillable Cloud Harbor.msi"
				
				try {
					Invoke-WebRequest -Uri $url -OutFile $out
#					[System.Windows.Forms.MessageBox]::Show($frmVersions, "The Skillable Cloud Harbor installer has been successfully added to your Downloads folder.", "Download Success", "OK", [System.Windows.Forms.MessageBoxIcon]::Information)
					Invoke-Item $dwn
				} catch {
					$errorMessage = $_.Exception.Message
					[System.Windows.Forms.MessageBox]::Show($frmVersions,"Error downloading the Skillable Cloud Harbor installer:`r`n`r`n$errorMessage", "Download Error", "OK", [System.Windows.Forms.MessageBoxIcon]::Error)
				}
			}
		)
		
		$frmVersions.Controls.Add($linkLabel)
	}
	
	# Show the form as a modal dialog
	$frmVersions.ShowDialog()
	
	# To exit the script after the form is closed, you can use:
	# exit
}
