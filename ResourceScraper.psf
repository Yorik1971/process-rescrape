<File version="3.2">
  <FileID>b2b2fb77-88d2-46f5-ba32-0f6fb6609789</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAGZ7SURBVHhe7d0HcBtnni36u3tvvXpV79W99Xb3
7t7andn1jMdhnGY8jmOP7XGUlWwF24qWJStn2ZKVrJyTlZMVSSVKzDnnnHPOORMkATBTOu/7GoBE
US0bkmxQAs6p+hVFAN1oABT/pxuB/41hGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZh
GIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZh
GIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZh
GIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZh
GIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZh
GIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZh
GIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGMZy
KRFa/vt//+/CP7a88cYbLZMmTWqZOHGiIL8SERHRw2jq1Kktr732Wss//uM/KnNcznMhWw53c9L5
P/7H/8Drr7+OEcOHY9XqNfD0CUJ6VjFyCiqQlVdGRERED5Hs/HLxtRQx8YnYuWsXhg0bhpdffhmi
CEDM9WbDeP+ZiMagkcN/6pSpuHLVBaHxWYhMK0ZSXg2S82uRRERERA8Vw3yuQWxWORIyi+Dk7I6J
EycpJeAf/uEfqo0j/qcjLqgZLvb8Ha65ISG7HNHZVQhLK0FIShFCkomIiOihlVKMGDG30wtr4Ozi
gffee1ceATCvAIi9f8033yxX9vxjc8TwTy1GOBERET0SQsUOe1xONWJT87F58xb89a9/Na8ATJo0
SePq4YfI9BJEpJciQuz9ExER0aMjNKUYyXk1iE9IxcSJE80rABMnTtJk55UipbBO7P2LFckSQERE
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
EJmPBYCIrAYLAJH5WACIyGqwABCZjwWAiKwGCwCR+VgAiMhqsAAQmY8FgIisBgsAkflYAIjIarAA
EJmPBYCIrAYLAJH5WACIyGqwABCZjwWAiKwGCwCR+VgAiMhqsAAQmY8FgIisBgsAkflYAIjIarAA
EJmPBYCIrAYLAJH5WACIyGqwABCZjwWAiKwGCwCR+VgAiMhqsAAQmY8FgIisBgsAkflYAIjIarAA
EJmPBYCIrAYLAJH5WACIyGqwABCZjwWAiKwGCwCR+VgAiMhqsAAQmY8FgIisBgsAkflYAIjIarAA
EJmPBYCIrAYLAJH5WACIyGqwABCZjwWAiKwGCwCR+VgAiMhqsAAQmY8FgIisBgsAkflYAIjIarAA
EJmPBYCIrAYLAJH5WACIyGqwABCZjwWAiKwGCwCR+VgAiMhqsAAQmY8FgIisBgsAkflYAIjIarAA
EJmPBYCIrAYLAJH5WACIyGqwABCZjwWAiKwGCwCR+VgAiMhqsAAQmY8FgIisBgsAkflYAIjIarAA
EJmPBYCIrAYLAJH5WACIyGqwABCZjwWAiKwGCwCR+VgAiMhqsAAQmY8FgIisBgsAkflYAIjIarAA
EJmPBYCIrAYLAJH5WACIyGqwABCZjwWAiKwGCwCR+VgAiMhqsAAQmY8FgIisBgsAkflYAIjIarAA
EJmPBYCIrAYLAJH5WACIyGqwABCZjwWAiKwGCwCR+VgAiMhqsAAQmY8FgIisBgsAkflYAIjIarAA
EJmPBYCIrAYLAJH5WACIyGqwABCZjwWAiKwGCwCR+VgAiMhqsAAQmY8FgIisBgsAkflYAIjIarAA
EJmPBYCIrAYLAJH5WACIyGqwABCZjwWAiKwGCwCR+VgAiMhqsAAQmY8FgIisBgsAkflYAIjIarAA
EJmPBYCIrAYLAJH5WACIyGqwABCZjwWAiKwGCwCR+VgAiMhqsAAQmY8FgIisBgsAkflYAIjIarAA
EJmPBYCIrAYLAJH5WACIyGqwABCZjwWAiKwGCwCR+VgAiMhqsAAQmY8FgIisBgsAkflYAIjIarAA
EJmPBYCIrAYLAJH5WACIyGqwABCZjwWAiKwGCwCR+VgAiMhqsAAQmY8FgIisBgsAkflYAIjIarAA
EJmPBYCIrAYLAJH5WACIyGqwABCZjwWAiKwGCwCR+VgAiMhqsAAQmY8FgIisBgsAkflYAIjIarAA
EJmPBYCIrAYLAJH5WACIyGqwABCZjwWAiKwGCwCR+VgAiMhqsAAQmY8FgIisBgsAkflYAIjIarAA
EJmPBYCIrAYLAJH5WACIyGqwABCZjwWAiKwGCwCR+VgAiMhqsAAQmY8FgIisBgsAkflYAIjIarAA
EJmPBYCIrAYLAJH5WACIyGqwABCZjwWAiKwGCwCR+VgAiMhqsAAQmY8FgIisBgsAkflYAIjIarAA
EJmPBYCIrAYLAJH5WACIyGqwABCZjwWAiKwGCwCR+VgAiMhqsAAQmY8FgIisBgsAkflYAIjIarAA
EJmPBYCIrAYLAJH5WACIyGqwABCZjwWAiKwGCwCR+VgAiMhqsAAQmY8FgIisBgsAkflYAIjIarAA
EJmPBYCIrAYLAJH5WACIyGqwABCZjwWAiKwGCwCR+VgAiMhqsAAQmY8FgIisBgsAkflYAIjIarAA
EJmPBYCIrAYLAJH5WACIyGqwABCZjwWAiKwGCwCR+VgAiMhqsAAQmY8FgIisBgsAkflYAIjIarAA
EJmPBYCIrAYLAJH5WACIyGqwABCZjwWAiKwGCwCR+VgAiMhqsAAQmY8FgIisBgsAkflYAIjIarAA
EJmPBYCIrAYLAJH5WACIyGqwABCZjwWAiKwGCwCR+VgAiMhqsAAQmY8FgIisBgsAkflYAIjIarAA
EJmPBYCIrAYLAJH5WACIyGqwABCZjwWAiKwGCwCR+VgAiMhqsAAQmY8FgIisBgsAkflYAIjIarAA
EJmPBYCIrAYLAJH5WACIyGqwABCZjwWAiKwGCwCR+VgAiMhqsAAQmY8FgIisBgsAkflYAIjIarAA
EJmPBYCIrAYLAJH5WACIyGqwABCZjwWAiKwGCwCR+VgAiMhqsAAQmY8FgIisBgsAkflYAIjIarAA
EJmPBYCIrAYLAJH5HokCsH//fjg7O0Omt7eXiEiVTH19PVavXs0CQPQzHvoCIP9T79u3D3v37kVq
aipiYmKIiFQlJCTAz88PixYtYgEg+hkPfQGQ/4EdHR2xYsUKrFu3jojoJ61Zswbbtm1DZWWl8pSA
2u8WInrIC4BJa2srWlpa0NzcTET0szQajervEiK65ZEoAFqtFjqdjojIbGq/S4jolkeiABAREdEv
iwWAiIjIBrEAEBER2SAWACIiIhvEAkBERGSDWACIiIhsEAsAERGRDWIBICIiskEsAERERDaIBYCI
iMgGsQAQERHZIBYAIiIiG8QCQEREZINYAIiIiGwQCwAREZENYgEgIiKyQSwARERENogFgIiIyAax
ABAREdkgFgAiIiIbxAJARERkg1gAiIiIbBALABERkQ1iASAiIrJBLABEREQ2iAWAiIjIBrEAEBER
2SAWACIiIhvEAkBERGSDWACIiIhsEAsAERGRDWIBICIiskEsAERERDZoCApAHUqKi1BRUYHy8nIi
IiIaAnIOy3mcX17/6xeA3GodKuo0aG6sR2MDERERDSU5j8vEXJbz+bZ5/YsXALHCkjqx0iYdKhuJ
iIhoKMl5XCzmspzPg+f1L/sUgFypkCNWTERERENPdVaL03/xAkBEREQPNxYAIiIiG8QCQEREZIMe
qACUiwKgPLdAREREj5ScSi0q77kATJykqaxpQksXUNXah2oiIiJ6pMi9/9YeoKik2vwC8NlnX/TE
JaSioKgCWTlFRERE9AgqKK5CRFQ8xowZozGO+J/OqFGjssaPH185buy4StEaiIiI6BEk57ic56NH
j040jniGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiG
YRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiG
YRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiG
YRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiG
YRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiG
YRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiG
YRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYZhfP//tv/3/zqDSJwj5f+kAAAAA
SUVORK5CYII=</Preview>
  <Form>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</Form>
  <Code><![CDATA[## Timer setup
#$timer = New-Object System.Windows.Forms.Timer
#$timer.Interval = 3000 # 3 seconds in milliseconds
#$timer.Enabled

function Set-OutputPath {
	param
	(
		[string]$path
	)
	
	#	$txtPath.Text = "$($curDir)\Output"
	
	if (-not (Test-Path -Path $txtPath.Text -PathType Leaf)) {
		try {
			New-Item -Path $txtPath.Text -ItemType directory -Force
			$txtRequestResult.Text = "Output path created."
			$txtRequestResult.ForeColor = [System.Drawing.Color]::Lime
		} catch {
			$txtRequestResult.Text = "Could not create the output path."
			$txtRequestResult.ForeColor = [System.Drawing.Color]::Red
		}
	}
}

$frmMain_Load={
	#TODO: Initialize Form Controls here
	Set-ControlTheme $frmMain -Theme Dark
	
	# Make the initial group box the main one
	$grpRequestScrape.Dock = 'Fill'
	$grpRequestScrape.Visible = $true
	$grpGetScrape.Dock = 'Fill'
	$grpGetScrape.Visible = $false
	
	# Get the current Date/Time stamp
	$curTimeStamp = (Get-Date).ToString("yyyyMMdd-HHmmss")
	
#	# Default the output path 
	#	Set-OutputPath -stamp $curTimeStamp
	$txtPath.Text = "C:\temp\Output"
	
	$hover = New-Object System.Windows.Forms.ToolTip
	$hover.SetToolTip($radAWS, "Coming Soon")
	$hover.SetToolTip($radGCP, "Coming Soon")
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $frmMain -Theme Dark
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $frmMain -Theme Light
}

# Function to validate the Azure Subscription ID
function Validate-SubscriptionID {
	param (
		[string]$subscriptionID
	)
	$pattern = '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$'
	
	return [regex]::IsMatch($subscriptionID, $pattern)
}

$timScrape.add_Tick({
		if ([System.IO.File]::Exists("$($txtGetPath.Text)\FlagFile.chk")) {
			$txtStats.Text = Get-Content -Path "$($txtGetPath.Text)\CountFile.cnt" -ErrorAction SilentlyContinue -Raw
		} else {
			# Retrieve the latest Resource Scrape log file
			try {
				$recentFile = Get-ChildItem -Path $txtGetPath.Text -Filter "resourceScrape*.log" |
				Sort-Object -Property LastWriteTime -Descending |
				Select-Object -First 1
			} catch {}
			
			# If the latest file is found then read it
			if ($recentFile) {
				# if a line is found indicating that a request to end the Resource Scrape look for the resulting JSON file
				$match = Select-String -Path "$($txtGetPath.Text)\$($recentFile.Name)" -Pattern "The get-ResourceScrape.ps1 utility has ended"
				if ($match) {
					$txtStats.Text = @"
The end of the Resource Scrape has been requested.

Waiting for the final output file.
"@
					$txtStats.ForeColor = [System.Drawing.Color]::Lime
					
					$jsnFile = [System.IO.Path]::GetFileNameWithoutExtension("$($txtGetPath.Text)\$($recentFile.Name)") + ".json"
					# if the JSON file is found Kick off the ACP Process utility
					if (Test-Path -Path "$($txtGetPath.Text)\$($jsnFile)" -PathType Leaf) {
						# Confirm that the Resource Scrape processor existss
						$prcScrape = "$($curDir)\process-ResourceScrape.ps1"
						if (Test-Path -Path $prcScrape -PathType Leaf) {
							$txtStats.Text = @"
The final output file has been found.

Starting the Resource Scrape processor.
"@
							$txtStats.ForeColor = [System.Drawing.Color]::Lime
							
							# Set the Result message
							$txtGetResult.Text = "Running the Resource Scrape Processor."
							$txtGetResult.ForeColor = [System.Drawing.Color]::Lime
							
							# Call the Process-ResourceScrape utility
							
							$jobScrape = Start-Job -ScriptBlock {
								param ($cmd,
									$fil,
									$htm,
									$rul,
									$pth,
									$dtl,
									$tme)
								# Set up the parameters
								if ($htm -and $tme -and $dtl) {
									& $cmd -file $fil -rulesFile $rul -OutPath $pth -Details -Stamp -showHtml
								} elseif (($htm -and $tme) -and -not ($dtl)) {
									& $cmd -file $fil -rulesFile $rul -OutPath $pth -Stamp -showHtml
								} elseif (($htm -and $dtl) -and -not ($tme)) {
									& $cmd -file $fil -rulesFile $rul -OutPath $pth -Details -showHtml
								} elseif (($tme -and $dtl) -and -not ($htm)) {
									& $cmd -file $fil -rulesFile $rul -OutPath $pth -Details -Stamp
								} elseif (-not ($htm -and $tme) -and $dtl) {
									& $cmd -file $fil -rulesFile $rul -OutPath $pth -Details
								} elseif (-not ($htm -and $dtl) -and $tme) {
									& $cmd -file $fil -rulesFile $rul -OutPath $pth -Stamp
								} elseif (-not ($tme -and $dtl) -and $htm) {
									& $cmd -file $fil -rulesFile $rul -OutPath $pth -ShowHtml
								} else {
									& $cmd -file $fil -rulesFile $rul -OutPath $pth 
								}
							} -ArgumentList $prcScrape, "$($txtGetPath.Text)\$jsnFile", $chkDisplayResults.Checked, "$($curDir)\rules.xml", $txtGetPath.Text, $chkDetails.Checked, $chkTimeStamp.Checked
							
							# Optionally, wait for the job to complete and get the results
							$jobScrape | Wait-Job | Receive-Job
							
							# Check for errors in the job
							$jobScrape | Receive-Job -ErrorAction SilentlyContinue | Format-List *
							
							# Stop the Statistics timer
							$timScrape.Stop()
							
							# Show the Statistics panel
							$grpGetScrape.Visible = $false
							$grpRequestScrape.Visible = $true
						}
					}
				}
			}
		}
	}
)

## Add the LostFocus event handler to the MaskedTextBox
#$mskSubscriptionId.Add_LostFocus({
#		if (-not ([string]::IsNullOrEmpty($mskSubscriptionId.Text)) -and (-not ($mskSubscriptionId.Text -eq "        -    -    -    -"))) {
#			$subscriptionID = $mskSubscriptionId.Text
#			if (Validate-SubscriptionID -subscriptionID $subscriptionID) {
#				$txtRequestResult.Text = "Valid Azure Subscription ID. Sub: $($subscriptionID)"
#				$txtRequestResult.ForeColor = [System.Drawing.Color]::Lime
#			} else {
#				$txtRequestResult.Text = "Invalid Azure Subscription ID. Sub: $($subscriptionID)"
#				$txtRequestResult.ForeColor = [System.Drawing.Color]::Red
#			}
#		}
#	}
#)

# Add the LostFocus event handler to the MaskedTextBox
$txtSubscriptionId.Add_LostFocus({
		if (-not ([string]::IsNullOrEmpty($txtSubscriptionId.Text))) {
			$subscriptionID = $txtSubscriptionId.Text
			if (Validate-SubscriptionID -subscriptionID $subscriptionID) {
				$txtRequestResult.Text = "Valid Azure Subscription ID. Sub: $($subscriptionID)"
				$txtRequestResult.ForeColor = [System.Drawing.Color]::Lime
			} else {
				$txtRequestResult.Text = "Invalid Azure Subscription ID. Sub: $($subscriptionID)"
				$txtRequestResult.ForeColor = [System.Drawing.Color]::Red
			}
		}
	}
)

$grpRequestScrape.add_Resize({
		$btnStartScrape.Top = 250
		$btnStartScrape.Left = 20
		$btnStartScrape.Width = $grpRequestScrape.Width - 40
	}
)

#$mskSubscriptionId_MaskInputRejected = [System.Windows.Forms.MaskInputRejectedEventHandler]{
#	if (-not ([string]::IsNullOrEmpty($mskSubscriptionId.Text)) -and (-not ($mskSubscriptionId.Text -eq "        -    -    -    -"))) {
#		# Ensure the Subscription ID field is valid
#		$txtRequestResult.Text = "Improper Azure Subscription ID."
#		$txtRequestResult.ForeColor = [System.Drawing.Color]::Red
#	}
#}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
			if ($target.ContextMenuStrip)
			{
				$Queue.Enqueue($target.ContextMenuStrip);
			}
		}
	}
}
#endregion

function Select-FolderDialog {
	param
	(
		[string]$path
	)
	
	$dialog = New-Object System.Windows.Forms.OpenFileDialog
	$dialog.InitialDirectory = $path
	$dialog.Title = "Select a folder"
	$dialog.CheckFileExists = $false
	$dialog.ValidateNames = $false
	$dialog.FileName = "Folder Selection"
	
	if ($dialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK) {
		$folderPath = [System.IO.Path]::GetDirectoryName($dialog.FileName)
		return $folderPath
	} else {
		return $path
	}
}

#$btnPath.add_Click({
#		# Create the output directory if it doesn't exist
#		if (-not (Test-Path -Path $txtPath.Text -PathType Container)) {
#			Set-OutputPath -path $txtPath.Text
#			#					New-Item -ItemType Directory -Force -Path $txtPath.Text
#		}
#		
#		# Show the folder dialog
#		$tmp = Select-FolderDialog -path $txtPath.Text
#		
#		# Select the returned folder
#		if (-not [string]::IsNullOrEmpty($txtPath.Text)) {
#			if (($tmp -ne $txtPath.Text) -and (-not [string]::IsNullOrEmpty($txtPath.Text))) {
#				$txtPath.Text = $tmp
#			}
#		}
#	}
#)

#$btnGetPath.add_Click({
#		# Create the output directory if it doesn't exist
#		if (-not (Test-Path -Path $txtGetPath.Text -PathType Container)) {
#			Set-OutputPath -path $txtGetPath.Text
#			#					New-Item -ItemType Directory -Force -Path $txtPath.Text
#		}
#		
#		# Show the folder dialog
#		$tmp = Select-FolderDialog -path $txtGetPath.Text
#		
#		# Select the returned folder
#		if (-not [string]::IsNullOrEmpty($txtGetPath.Text)) {
#			if (($tmp -ne $txtGetPath.Text) -and (-not [string]::IsNullOrEmpty($txtGetPath.Text))) {
#				$txtGetPath.Text = $tmp
#			}
#		}
#	}
#)

$exitToolStripMenuItem1_Click={
	#TODO: Place custom script here
	$frmMain.Close()
}

$btnStartScrape_Click = {
	# Ensure all the fields are properly populated
#	if ($mskSubscriptionId.Text -ne "        -    -    -    -") {
	if (-not ([string]::IsNullOrEmpty($txtSubscriptionId.Text))) {
		# Ensure the Subscription ID field is populated and valid
		$subscriptionID = $txtSubscriptionId.Text
		if (-not (Validate-SubscriptionID -subscriptionID $subscriptionID)) {
			$txtRequestResult.Text = "Invalid Azure Subscription ID. Sub: $($subscriptionID)"
			$txtRequestResult.ForeColor = [System.Drawing.Color]::Red
		} elseif ([string]::IsNullOrEmpty($txtUsername.Text)) {
			# Ensure the Username field is populated
			$txtRequestResult.Text = "The Username field can not be blank."
			$txtRequestResult.ForeColor = [System.Drawing.Color]::Red
		} elseif ([string]::IsNullOrEmpty($txtPassword.Text)) {
			# Ensure the Password field is populated
			$txtRequestResult.Text = "The Password field can not be blank."
			$txtRequestResult.ForeColor = [System.Drawing.Color]::Red
		} elseif ([string]::IsNullOrEmpty($txtPath.Text)) {
			# Ensure the output path field is populated
			$txtRequestResult.Text = "The Output Path field can not be blank."
			$txtRequestResult.ForeColor = [System.Drawing.Color]::Red
		} else {
			if (Test-Path -Path "$($curDir)\get-ResourceScrape.ps1" -PathType Leaf) {
				# Set the default msg for the Stats text box
				$txtStats.Text = @"
Launching the Resource Scrape. 

Please be patient.
"@
				# Show the Statistics panel
				$grpGetScrape.Visible = $true
				$grpRequestScrape.Visible = $false
				
				# Create the output directory if it doesn't exist
				if (-not (Test-Path -Path $txtPath.Text -PathType Container)) {
					Set-OutputPath -path $txtPath.Text
					#					New-Item -ItemType Directory -Force -Path $txtPath.Text
				}
				
				# Show the output path
				#				$txtPath.Text = "$($txtPath.Text)\GUI"
				#				$txtPath.Text = "$($txtPath.Text)"
				#				$txtPath.Text = "$($txtPath.Text)\Output"
				$txtGetPath.Text = $txtPath.Text
				
				# Set the Result message
				$txtGetResult.Text = "The current pass will run until all resources are gathered."
				$txtGetResult.ForeColor = [System.Drawing.Color]::Lime
				
				# Call the Get-ResourceScrape utility
				$getScrape = "$($curDir)\get-ResourceScrape.ps1"
				# Set up the parameters
				if ($chkTimeStamp.Checked -and $chkDetails.Checked) {
					#					& $cmd -SubscriptionId $sub -Username $usr -Password $psw -OutPath $out -Details -Stamp
					$params = @{
						Subscription = $txtSubscriptionId.Text
						Username	 = $txtUsername.Text
						Password	 = $txtPassword.Text
						OutPath	     = $txtPath.Text
						Details	     = $chkDetails.Checked
						Stamp	     = $chkTimeStamp.Checked
					}
				} elseif ($chkTimeStamp.Checked -and -not ($chkDetails.Checked)) {
					#					& $cmd -SubscriptionId $sub -Username $usr -Password $psw -OutPath $out -Stamp
					$params = @{
						Subscription = $txtSubscriptionId.Text
						Username	 = $txtUsername.Text
						Password	 = $txtPassword.Text
						OutPath	     = $txtPath.Text
						Stamp	     = $chkTimeStamp.Checked
					}
				} elseif (-not ($chkTimeStamp.Checked) -and $chkDetails.Checked) {
					#					& $cmd -SubscriptionId $sub -Username $usr -Password $psw -OutPath $out -Details
					$params = @{
						Subscription = $txtSubscriptionId.Text
						Username	 = $txtUsername.Text
						Password	 = $txtPassword.Text
						OutPath	     = $txtPath.Text
						Details	     = $chkDetails.Checked
					}
				} else {
					#					& $cmd -SubscriptionId $sub -Username $usr -Password $psw -OutPath $out
					$params = @{
						Subscription = $txtSubscriptionId.Text
						Username	 = $txtUsername.Text
						Password	 = $txtPassword.Text
						OutPath	     = $txtPath.Text
					}
				}
				#				$params = @{
				#					Subscription = $txtSubscriptionId.Text
				#					Username     = $txtUsername.Text
				#					Password     = $txtPassword.Text
				#					OutPath      = $txtPath.Text
				#					Details      = $chkDetails.Checked
				#					Stamp        = $chkTimeStamp.Checked
				#				}
				
				$job = Start-Job -ScriptBlock {
					param ($getScrape,
						$params)
					& $getScrape @params
				} -ArgumentList $getScrape, $params
				
				#				$jobScrape = Start-Job -ScriptBlock {
				#					param ($cmd,
				#						$sub,
				#						$usr,
				#						$psw,
				#						$out,
				#						$dtl,
				#						$tme)
				#					# Set up the parameters
				#					if ($tme -and $dtl) {
				#						& $cmd -SubscriptionId $sub -Username $usr -Password $psw -OutPath $out -Details -Stamp
				#					} elseif ($tme -and -not ($dtl)) {
				#						& $cmd -SubscriptionId $sub -Username $usr -Password $psw -OutPath $out -Stamp
				#					} elseif (-not ($tme) -and $dtl) {
				#						& $cmd -SubscriptionId $sub -Username $usr -Password $psw -OutPath $out -Details
				#					} else {
				#						& $cmd -SubscriptionId $sub -Username $usr -Password $psw -OutPath $out
				#					}
				#				} -ArgumentList $getScrape, $txtSubscriptionId.Text, $txtUsername.Text, $txtPassword.Text, $($txtPath.Text), $chkTimeStamp.Checked, $chkDetails.Checked
				#				
				##				# Optionally, wait for the job to complete and get the results
				#				$jobScrape | Wait-Job | Receive-Job
				##				$jobScrape | Wait-Job
				#				Wait-Job -Job $job
								$result = Receive-Job -Job $job
				
				#				# Check for errors in the job
				#				$result = $jobScrape | Receive-Job -ErrorAction SilentlyContinue | Format-List *
				
				# start the Statistics timer
				#				$timer.start()
				$timScrape.Start()
				
			} else {
				$txtRequestResult.Text = "Could not find the 'get-ResourceScrape.ps1' utility in $($curDir)."
				$txtRequestResult.ForeColor = [System.Drawing.Color]::Red
			}
		}
	} else {
		$txtRequestResult.Text = "The Subscription ID field can not be blank."
		$txtRequestResult.ForeColor = [System.Drawing.Color]::Red
	}
}

#$txtPath.add_LostFocus({
#	if ([string]::IsNullOrEmpty($txtPath.Text)) {
#			Set-OutputPath
#		}
#	}
#)

$btnCancel.add_Click({
		# Delete the Job Scrape Flag File
		Remove-Item -Path "$($txtGetPath.Text)\FlagFile.chk" -Force -ErrorAction SilentlyContinue
		
#		# Stop the timer
#		$timScrape.Stop()
		
		# Show Cancellation message
		$txtRequestResult.Text = "The Resource Scrape has been cancelled by the user. The Report may display when ready."
		$txtRequestResult.ForeColor = [System.Drawing.Color]::Orange
		
		# Show the Statistics panel
		$grpRequestScrape.Visible = $true
		$grpGetScrape.Visible = $false
		
	})

function Get-ScriptDirectory {
<#
    .SYNOPSIS
        Get-ScriptDirectory returns the proper location of the script.
 
    .OUTPUTS
        System.String
   
    .NOTES
        Returns the correct path within a packaged executable.
#>
	[OutputType([string])]
	param ()
	if ($null -ne $hostinvocation) {
		Split-Path $hostinvocation.MyCommand.path
	} else {
		Split-Path $script:MyInvocation.MyCommand.Path
	}
}

$jobScrape = $null

# Set the current Directory
#$curDir = $PSScriptRoot
#$curDir = (Get-Location).Path
$curDir = Get-ScriptDirectory

$btnPath_Click={
	# Create the output directory if it doesn't exist
	if (-not (Test-Path -Path $txtPath.Text -PathType Container)) {
		Set-OutputPath -path $txtPath.Text
		#					New-Item -ItemType Directory -Force -Path $txtPath.Text
	}
	
	# Show the folder dialog
	$tmp = Select-FolderDialog -path $txtPath.Text
	
	# Select the returned folder
	if (-not [string]::IsNullOrEmpty($txtPath.Text)) {
		if (($tmp -ne $txtPath.Text) -and (-not [string]::IsNullOrEmpty($txtPath.Text))) {
			$txtPath.Text = $tmp
		}
	}
}

$btnGetPath_Click={
	# Create the output directory if it doesn't exist
	if (-not (Test-Path -Path $txtGetPath.Text -PathType Container)) {
		Set-OutputPath -path $txtGetPath.Text
		#					New-Item -ItemType Directory -Force -Path $txtPath.Text
	}
	
	# Show the folder dialog
	$tmp = Select-FolderDialog -path $txtGetPath.Text
	
	# Select the returned folder
	if (-not [string]::IsNullOrEmpty($txtGetPath.Text)) {
		if (($tmp -ne $txtGetPath.Text) -and (-not [string]::IsNullOrEmpty($txtGetPath.Text))) {
			$txtGetPath.Text = $tmp
		}
	}
}
]]></Code>
  <TV>0</TV>
  <Bookmarks />
  <BreakPoints>
    <Line Disabled="True">67</Line>
    <Line Disabled="True">72</Line>
    <Line Disabled="True">95</Line>
    <Line Disabled="True">99</Line>
    <Line Disabled="True">108</Line>
    <Line Disabled="True">583</Line>
    <Line Disabled="True">715</Line>
    <Line Disabled="False">737</Line>
  </BreakPoints>
  <TracePoints />
  <Mode>1</Mode>
  <Assemblies />
</File>